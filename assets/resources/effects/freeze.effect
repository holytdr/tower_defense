// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        brightScale: { value: 1.2 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform LAMYOUM_COM{
    float brightScale;
  };

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    float b = abs(o.b - o.r - o.g)*brightScale;
    float g = abs(o.g - o.b - o.r)*brightScale;
    float r = abs(o.r - o.g - o.b)*brightScale;

    // sort r,g,b as b >= g >= r
    if ((b >= r) && (b >= g)) {
      gl_FragColor = vec4(min(g, r), max(g, r), b, o.a);
    } else if ((g >= b) && (g >= r)) {
      gl_FragColor = vec4(min(r, b), max(r, b), g, o.a);
    } else {
      gl_FragColor = vec4(min(g, b), max(g, b), r, o.a);
    }
  }
}%
